service: app-name
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name
frameworkVersion: '3'
configValidationMode: error
provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, env:STAGE}
  region: "ap-northeast-1"
  # profile: ${opt:profile, env:PROFILE}
  versionFunctions: false
  timeout: 300
  stackTags:
    project:stage: ${self:provider.stage}
    project:component-name: "API"
    project:release-version: ${env:RELEASE_VERSION, "None"}
    Name: ${self:provider.stage}-${env:APP_NAME, "app-name"}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource:
        - "*"
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    NODE_ENV: ${self:provider.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

plugins:
  - serverless-plugin-typescript
  - serverless-dotenv-plugin #use for dotenv
  - serverless-offline
  - serverless-plugin-optimize
  # - serverless-domain-manager
  - serverless-plugin-resource-tagging
  - serverless-tag-cloud-watch-logs

#customize config
custom:
  serverless-offline:
    host: 0.0.0.0 #https://forum.serverless.com/t/possible-to-run-serverless-in-a-docker-container/5764/3
    httpPort: 3000
    websocketPort: 3001
    lambdaPort: 3002
    noPrependStageInUrl: true    ##<----- this guy!
    printOutput: true
  optimize:
    external: ['swagger-ui-dist']
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules:
      packagePath: ./package.json
      forceInclude:
        - pg
      forceExclude:
        - debug
  dotenv:
    basePath: ./env/
    logging: false
  # sub-domain-name:
  #   development: development.api
  #   staging: staging.api
  #   production: api
  # customDomain:
  #   domainName: "${self:custom.sub-domain-name.${self:provider.stage}}.yourdomain.com" # Change this to your domain.
  #   certificateName: "yourdomain.com"
  #   stage: ${self:provider.stage}
  #   createRoute53Record: true
  #   endpointType: "regional"
  cloudWatchLogsTags:
    project:stage: ${self:provider.stage}
    project:component-name: "API"
    project:release-version: ${env:RELEASE_VERSION, "None"}
    Name: ${self:provider.stage}-app-name

layers:
  pg:
    path: layer

functions:
  app:
    handler: src/main.handler
    events:
      - http:
          path: /
          method: ANY
          cors: true
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
resources:
  Resources:
    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    GatewayResponse:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: "ApiGatewayRestApi"
        StatusCode: "401"
    AuthFailureGatewayResponse:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: "ApiGatewayRestApi"
        StatusCode: "401"
